!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BCMDEV	BCMDEV.h	/^struct BCMDEV {$/;"	s
BCMDEV_H	BCMDEV.h	2;"	d
CMD	BCMDEV.h	/^  enum CMD$/;"	g	struct:BCMDEV
COUNT_RESET	BCMDEV.h	/^    COUNT_RESET $/;"	e	enum:BCMDEV::CMD
CUNET_PRINT	TUDPLIB.h	20;"	d
INFO	TUDPLIB.h	/^	typedef DEV INFO;$/;"	t	class:TUDPLIB
LOW	PROTO.h	/^    PROTOLOW LOW;$/;"	m	class:PROTOHI
NO_ERROR	UDPLIB.cpp	64;"	d	file:
PROTOHI	PROTO.h	/^    PROTOHI(){ }; $/;"	f	class:PROTOHI
PROTOHI	PROTO.h	/^template <typename DEV, typename PROTOLOW> class PROTOHI {$/;"	c
R0	BCMDEV.h	/^    R0,$/;"	e	enum:BCMDEV::REG
R1	BCMDEV.h	/^    R1,$/;"	e	enum:BCMDEV::REG
R14	BCMDEV.h	/^    R14,$/;"	e	enum:BCMDEV::REG
R15	BCMDEV.h	/^    R15,$/;"	e	enum:BCMDEV::REG
R16	BCMDEV.h	/^    R16,$/;"	e	enum:BCMDEV::REG
R17	BCMDEV.h	/^    R17,$/;"	e	enum:BCMDEV::REG
R18	BCMDEV.h	/^    R18,$/;"	e	enum:BCMDEV::REG
R19	BCMDEV.h	/^    R19,$/;"	e	enum:BCMDEV::REG
R2	BCMDEV.h	/^    R2,$/;"	e	enum:BCMDEV::REG
R20	BCMDEV.h	/^    R20,$/;"	e	enum:BCMDEV::REG
R21	BCMDEV.h	/^    R21,$/;"	e	enum:BCMDEV::REG
R22	BCMDEV.h	/^    R22,$/;"	e	enum:BCMDEV::REG
R23	BCMDEV.h	/^    R23,$/;"	e	enum:BCMDEV::REG
R24	BCMDEV.h	/^    R24,$/;"	e	enum:BCMDEV::REG
R25	BCMDEV.h	/^    R25,$/;"	e	enum:BCMDEV::REG
R26	BCMDEV.h	/^    R26,$/;"	e	enum:BCMDEV::REG
R27	BCMDEV.h	/^    R27,$/;"	e	enum:BCMDEV::REG
R28	BCMDEV.h	/^    R28,$/;"	e	enum:BCMDEV::REG
R29	BCMDEV.h	/^    R29,$/;"	e	enum:BCMDEV::REG
R3	BCMDEV.h	/^    R3,$/;"	e	enum:BCMDEV::REG
R30	BCMDEV.h	/^    R30,$/;"	e	enum:BCMDEV::REG
R8	BCMDEV.h	/^    R8,$/;"	e	enum:BCMDEV::REG
R9	BCMDEV.h	/^    R9,$/;"	e	enum:BCMDEV::REG
READ_BUFFER	BCMDEV.h	/^    READ_BUFFER,$/;"	e	enum:BCMDEV::CMD
READ_REGISTER	BCMDEV.h	/^    READ_REGISTER,$/;"	e	enum:BCMDEV::CMD
REG	BCMDEV.h	/^  enum REG{$/;"	g	struct:BCMDEV
REG_CACHE_MASK	BCMDEV.h	/^  static const REG_CACHE_MASK_t REG_CACHE_MASK = (1 << REG::STATUS) | (1 << REG::R1);$/;"	m	struct:BCMDEV
REG_CACHE_MASK_t	BCMDEV.h	/^  typedef uint32_t REG_CACHE_MASK_t;$/;"	t	struct:BCMDEV
REG_SIZE	BCMDEV.h	/^  static const int REG_SIZE = 32;$/;"	m	struct:BCMDEV
REG_t	BCMDEV.h	/^  typedef uint32_t REG_t;$/;"	t	struct:BCMDEV
SOCKET	UDPLIB.cpp	63;"	d	file:
START_CYCLE	BCMDEV.h	/^    START_CYCLE,$/;"	e	enum:BCMDEV::CMD
START_GENERATOR	BCMDEV.h	/^    START_GENERATOR,$/;"	e	enum:BCMDEV::CMD
STATUS	BCMDEV.h	/^    STATUS,$/;"	e	enum:BCMDEV::REG
STOP_CYCLE	BCMDEV.h	/^    STOP_CYCLE,$/;"	e	enum:BCMDEV::CMD
SetSockTO	UDPLIB.cpp	/^static int SetSockTO(SOCKET s, int to_msec)$/;"	f	file:
TUDPLIB	TUDPLIB.h	/^	TUDPLIB():UDPLIB() {}$/;"	f	class:TUDPLIB
TUDPLIB	TUDPLIB.h	/^class TUDPLIB: public UDPLIB$/;"	c
UDPLIB	UDPLIB.cpp	/^UDPLIB::UDPLIB():sock(-1)$/;"	f	class:UDPLIB
UDPLIB	UDPLIB.h	/^class UDPLIB {$/;"	c
UDPLIB_H	UDPLIB.h	2;"	d
WRITE_REGISTER	BCMDEV.h	/^    WRITE_REGISTER,$/;"	e	enum:BCMDEV::CMD
__TARGET_LINUX__	UDPLIB.cpp	62;"	d	file:
ack_to	UDPLIB.cpp	/^int UDPLIB::ack_to(int cmd, int regn, int to_ms, int count, int repeat)$/;"	f	class:UDPLIB
close	UDPLIB.cpp	/^int UDPLIB::close()$/;"	f	class:UDPLIB
closesocket	UDPLIB.cpp	65;"	d	file:
conf	UDPLIB.cpp	/^int UDPLIB::conf()$/;"	f	class:UDPLIB
connect	UDPLIB.cpp	/^int UDPLIB::connect(const char *peer, int port)$/;"	f	class:UDPLIB
cunet_print	UDPLIB.cpp	/^int UDPLIB::cunet_print(int _debug_level, const char* str, uint8_t* buf, int size)$/;"	f	class:UDPLIB
disconnect	UDPLIB.cpp	/^int UDPLIB::disconnect()$/;"	f	class:UDPLIB
is_connected	UDPLIB.cpp	/^int UDPLIB::is_connected() const$/;"	f	class:UDPLIB
m_conf	UDPLIB.h	/^    int m_conf;$/;"	m	class:UDPLIB
main	main.cpp	/^int main(){$/;"	f
print_buf	UDPLIB.cpp	/^int print_buf(uint8_t* buf, int buf_size)$/;"	f
rd_reg	PROTO.h	/^    int rd_reg(unsigned int reg, unsigned int *val)$/;"	f	class:PROTOHI
read_reg	TUDPLIB.h	/^int TUDPLIB<DEV>::read_reg(unsigned int regn, unsigned int *param)$/;"	f	class:TUDPLIB
ready_udp	UDPLIB.cpp	/^int UDPLIB::ready_udp(int timeout_ms)$/;"	f	class:UDPLIB
recv	UDPLIB.cpp	/^int UDPLIB::recv(void *buf, int buf_size)$/;"	f	class:UDPLIB
recv_to	UDPLIB.cpp	/^int UDPLIB::recv_to(void *_buf, int _size, int _to_ms, const int unet_flag)$/;"	f	class:UDPLIB
send	UDPLIB.cpp	/^int UDPLIB::send(void *buf, int buf_size)$/;"	f	class:UDPLIB
send_com	UDPLIB.cpp	/^int UDPLIB::send_com(int instr, int nreg, int param1, int param2)$/;"	f	class:UDPLIB
serv_addr	UDPLIB.h	/^    struct sockaddr_in serv_addr;$/;"	m	class:UDPLIB	typeref:struct:UDPLIB::sockaddr_in
sock	UDPLIB.h	/^    int sock;$/;"	m	class:UDPLIB
socket	UDPLIB.cpp	/^int UDPLIB::socket()$/;"	f	class:UDPLIB
start	PROTO.h	/^    int start()$/;"	f	class:PROTOHI
start	TUDPLIB.h	/^int TUDPLIB<DEV>::start()$/;"	f	class:TUDPLIB
stop	PROTO.h	/^    int stop()$/;"	f	class:PROTOHI
stop	TUDPLIB.h	/^int TUDPLIB<DEV>::stop()$/;"	f	class:TUDPLIB
wr_reg	PROTO.h	/^    int wr_reg(unsigned int reg, unsigned int val)$/;"	f	class:PROTOHI
write_reg	TUDPLIB.h	/^int TUDPLIB<DEV>::write_reg(unsigned int regn, unsigned int param)$/;"	f	class:TUDPLIB
~PROTOHI	PROTO.h	/^    ~PROTOHI(){ };$/;"	f	class:PROTOHI
~TUDPLIB	TUDPLIB.h	/^	~TUDPLIB() {}$/;"	f	class:TUDPLIB
~UDPLIB	UDPLIB.cpp	/^UDPLIB::~UDPLIB()$/;"	f	class:UDPLIB
