-	Session.vim	/^nnoremap <buffer> <silent> - :CCTreeRecurseDepthMinus$/;"	m
=	Session.vim	/^nnoremap <buffer> <silent> = :CCTreeRecurseDepthPlus$/;"	m
w	Session.vim	/^nnoremap <silent> w :CCTreeWindowToggle$/;"	m
y	Session.vim	/^nnoremap <silent> y :CCTreeWindowSaveCopy$/;"	m
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
0	Session.vim	/^normal! 0$/;"	m
016|	Session.vim	/^normal! 016|$/;"	m
017|	Session.vim	/^normal! 017|$/;"	m
08|	Session.vim	/^normal! 08|$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)$/;"	m
ACK_LENGTH	BCMDEV.h	/^    ACK_LENGTH = 4,$/;"	e	enum:BCMDEV::CONSTANTS
ACK_PACKET	BCMDEV.h	/^    ACK_PACKET = 0x10,$/;"	e	enum:BCMDEV::CONSTANTS
BCMDEV	BCMDEV.h	/^struct BCMDEV {$/;"	s
BCMDEV_H	BCMDEV.h	2;"	d
CHK	chk.h	25;"	d
CHKCURPOS	chk.h	19;"	d
CHKTRUE	chk.h	27;"	d
CHKTRUEMESG	chk.h	28;"	d
CHK_DATATIME_H	chk_dt.h	2;"	d
CHK_H	chk.h	2;"	d
CHK_STR	chk.h	24;"	d
CMD	BCMDEV.h	/^  enum CMD$/;"	g	struct:BCMDEV
CMD_FLASHRD	BCMDEV.h	/^    CMD_FLASHRD   = 0x0f,$/;"	e	enum:BCMDEV::CMD
CMD_FLASHWR	BCMDEV.h	/^    CMD_FLASHWR   = 0x09,$/;"	e	enum:BCMDEV::CMD
CMD_IPREWR	BCMDEV.h	/^    CMD_IPREWR    = 0x0a,$/;"	e	enum:BCMDEV::CMD
CMD_RDADC	BCMDEV.h	/^    CMD_RDADC     = 0x08,$/;"	e	enum:BCMDEV::CMD
CMD_RDREG	BCMDEV.h	/^    CMD_RDREG     = 0x04,$/;"	e	enum:BCMDEV::CMD
CMD_RESETCNT	BCMDEV.h	/^    CMD_RESETCNT  = 0x07,$/;"	e	enum:BCMDEV::CMD
CMD_START	BCMDEV.h	/^    CMD_START     = 0x03,$/;"	e	enum:BCMDEV::CMD
CMD_STARTGEN	BCMDEV.h	/^    CMD_STARTGEN  = 0x06,$/;"	e	enum:BCMDEV::CMD
CMD_STOP	BCMDEV.h	/^    CMD_STOP      = 0x05,$/;"	e	enum:BCMDEV::CMD
CMD_WRRDREG	BCMDEV.h	/^    CMD_WRRDREG   = 0x0c,$/;"	e	enum:BCMDEV::CMD
CMD_WRREG	BCMDEV.h	/^    CMD_WRREG     = 0x00,$/;"	e	enum:BCMDEV::CMD
CONF_PACKET	BCMDEV.h	/^    CONF_PACKET = 0x11,$/;"	e	enum:BCMDEV::CONSTANTS
CONSTANTS	BCMDEV.h	/^  enum CONSTANTS {$/;"	g	struct:BCMDEV
CUNET_PRINT	TUDPLIB.h	20;"	d
CUNET_PRINT	UDPLIB.h	37;"	d
D	chk.h	15;"	d
D_	chk.h	17;"	d
D_DATATIME	chk.h	22;"	d
D_DATATIME	chk_dt.h	15;"	d
D_DATATIME_F	chk_dt.h	/^static void D_DATATIME_F()$/;"	f
D_FILE_NAME	chk.h	/^static const char* D_FILE_NAME(const char* file)$/;"	f
D_PREF	chk.h	5;"	d
D_PRINTF	chk.h	9;"	d
D_PRINTF	chk_dt.h	10;"	d
Dcont	chk.h	16;"	d
Dif	chk.h	13;"	d
INFO	TUDPLIB.h	/^	typedef DEV INFO;$/;"	t	class:TUDPLIB
MED	PROTOHI.h	/^    PROTOMED<DEV, PROTOLOW> MED;$/;"	m	class:PROTOHI
NO_ERROR	UDPLIB.cpp	64;"	d	file:
PROTOHI	PROTOHI.h	/^PROTOHI<DEV, PROTOLOW>::PROTOHI() { }$/;"	f	class:PROTOHI
PROTOHI	PROTOHI.h	/^template <typename DEV, typename PROTOLOW> class PROTOHI {$/;"	c
PROTOMED	PROTOMED.h	/^    PROTOMED(){ }; $/;"	f	class:PROTOMED
PROTOMED	PROTOMED.h	/^template <typename DEV, typename PROTOLOW> class PROTOMED : public PROTOLOW {$/;"	c
PROTOMED_H	PROTOMED.h	2;"	d
R0	BCMDEV.h	/^    R0 = 0,$/;"	e	enum:BCMDEV::REG
R1	BCMDEV.h	/^    R1 = 1,$/;"	e	enum:BCMDEV::REG
R14	BCMDEV.h	/^    R14,$/;"	e	enum:BCMDEV::REG
R15	BCMDEV.h	/^    R15,$/;"	e	enum:BCMDEV::REG
R16	BCMDEV.h	/^    R16,$/;"	e	enum:BCMDEV::REG
R17	BCMDEV.h	/^    R17,$/;"	e	enum:BCMDEV::REG
R18	BCMDEV.h	/^    R18,$/;"	e	enum:BCMDEV::REG
R19	BCMDEV.h	/^    R19,$/;"	e	enum:BCMDEV::REG
R2	BCMDEV.h	/^    R2 = 2,$/;"	e	enum:BCMDEV::REG
R20	BCMDEV.h	/^    R20,$/;"	e	enum:BCMDEV::REG
R21	BCMDEV.h	/^    R21,$/;"	e	enum:BCMDEV::REG
R22	BCMDEV.h	/^    R22,$/;"	e	enum:BCMDEV::REG
R23	BCMDEV.h	/^    R23,$/;"	e	enum:BCMDEV::REG
R24	BCMDEV.h	/^    R24,$/;"	e	enum:BCMDEV::REG
R25	BCMDEV.h	/^    R25,$/;"	e	enum:BCMDEV::REG
R26	BCMDEV.h	/^    R26,$/;"	e	enum:BCMDEV::REG
R27	BCMDEV.h	/^    R27,$/;"	e	enum:BCMDEV::REG
R28	BCMDEV.h	/^    R28,$/;"	e	enum:BCMDEV::REG
R29	BCMDEV.h	/^    R29,$/;"	e	enum:BCMDEV::REG
R3	BCMDEV.h	/^    R3 = 3,$/;"	e	enum:BCMDEV::REG
R30	BCMDEV.h	/^    R30,$/;"	e	enum:BCMDEV::REG
R8	BCMDEV.h	/^    R8 = 8,$/;"	e	enum:BCMDEV::REG
R9	BCMDEV.h	/^    R9,$/;"	e	enum:BCMDEV::REG
REG	BCMDEV.h	/^  enum REG{$/;"	g	struct:BCMDEV
REG_CACHE_MASK	BCMDEV.h	/^  static const REG_CACHE_MASK_t REG_CACHE_MASK = (1 << REG::STATUS) | (1 << REG::R1);$/;"	m	struct:BCMDEV
REG_CACHE_MASK_t	BCMDEV.h	/^  typedef uint32_t REG_CACHE_MASK_t;$/;"	t	struct:BCMDEV
REG_SIZE	BCMDEV.h	/^  static const int REG_SIZE = 32;$/;"	m	struct:BCMDEV
REG_t	BCMDEV.h	/^  typedef uint32_t REG_t;$/;"	t	struct:BCMDEV
SOCKET	UDPLIB.cpp	63;"	d	file:
STATUS	BCMDEV.h	/^    STATUS,$/;"	e	enum:BCMDEV::REG
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
SetSockTO	UDPLIB.cpp	/^static int SetSockTO(SOCKET s, int to_msec)$/;"	f	file:
TUDPLIB	TUDPLIB.h	/^	TUDPLIB():UDPLIB() {}$/;"	f	class:TUDPLIB
TUDPLIB	TUDPLIB.h	/^class TUDPLIB: public UDPLIB$/;"	c
UDPLIB	UDPLIB.cpp	/^UDPLIB::UDPLIB():sock(-1)$/;"	f	class:UDPLIB
UDPLIB	UDPLIB.h	/^class UDPLIB {$/;"	c
UDPLIB_H	UDPLIB.h	2;"	d
WARN	chk.h	26;"	d
WARNTRUE	chk.h	29;"	d
WAVEFORMMAP_H	waveFormMap.h	2;"	d
WFM	waveFormMap.h	137;"	d
WFM4	waveFormMap.h	139;"	d
WFM4_t	waveFormMap.h	131;"	d
WFM4type	waveFormMap.h	135;"	d
WFM_t	waveFormMap.h	130;"	d
WFMtype	waveFormMap.h	133;"	d
__TARGET_LINUX__	UDPLIB.cpp	62;"	d	file:
ack_to	UDPLIB.cpp	/^int UDPLIB::ack_to(int cmd, int regn, int to_ms, int count, int repeat)$/;"	f	class:UDPLIB
close	UDPLIB.cpp	/^int UDPLIB::close()$/;"	f	class:UDPLIB
closesocket	UDPLIB.cpp	65;"	d	file:
conf	UDPLIB.cpp	/^int UDPLIB::conf()$/;"	f	class:UDPLIB
connect	PROTOHI.h	/^int PROTOHI<DEV, PROTOLOW>::connect(const char* _hostname, int _port){$/;"	f	class:PROTOHI
connect	UDPLIB.cpp	/^int UDPLIB::connect(const char *peer, int port)$/;"	f	class:UDPLIB
cunet_print	UDPLIB.cpp	/^int UDPLIB::cunet_print(int _debug_level, const char* str, uint8_t* buf, int size)$/;"	f	class:UDPLIB
debug_level	main.cpp	/^int debug_level;$/;"	v
disconnect	UDPLIB.cpp	/^int UDPLIB::disconnect()$/;"	f	class:UDPLIB
get_ADC_buffer	PROTOHI.h	/^int PROTOHI<DEV, PROTOLOW>::get_ADC_buffer(float* buffer, int size){$/;"	f	class:PROTOHI
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
hostname	PROTOHI.h	/^    const char* hostname;$/;"	m	class:PROTOHI
init_generator	PROTOMED.h	/^    int init_generator() {$/;"	f	class:PROTOMED
is_connected	UDPLIB.cpp	/^int UDPLIB::is_connected() const$/;"	f	class:UDPLIB
linspace	waveFormMap.h	/^		void linspace(float t0, float tmult, int _size = DATA_SIZE) {$/;"	f	class:wave_form_map
linspace	waveFormMap.h	/^		void linspace(float t0, float tmult, wave_form_map<U, DATA_SIZE> idx) {$/;"	f	class:wave_form_map
m_conf	UDPLIB.h	/^    int m_conf;$/;"	m	class:UDPLIB
main	main.cpp	/^int main(){$/;"	f
max	waveFormMap.h	/^		T max(size_t begin = 0, size_t end = DATA_SIZE) {$/;"	f	class:wave_form_map
maxsize	waveFormMap.h	/^		size_t maxsize()                 { return DATA_SIZE; }$/;"	f	class:wave_form_map
mean	waveFormMap.h	/^		float mean(size_t begin = 0, size_t end = DATA_SIZE) {$/;"	f	class:wave_form_map
mean	waveFormMap.h	/^		float mean(wave_form_map<U, DATA_SIZE> weight, size_t begin = 0, size_t end = DATA_SIZE) {$/;"	f	class:wave_form_map
mean2	waveFormMap.h	/^		float mean2(wave_form_map<U, DATA_SIZE> weight, size_t begin = 0, size_t end = DATA_SIZE) {$/;"	f	class:wave_form_map
min	waveFormMap.h	/^		T min(size_t begin=0, size_t end = DATA_SIZE) {$/;"	f	class:wave_form_map
ne	waveFormMap.h	/^		int* ne;$/;"	m	class:wave_form_map
operator *=	waveFormMap.h	/^		void operator*=(float value) {$/;"	f	class:wave_form_map
operator =	waveFormMap.h	/^		void operator=(const wave_form_map& src)$/;"	f	class:wave_form_map
operator []	waveFormMap.h	/^		T& operator[](int i)             { return storage[i]; }$/;"	f	class:wave_form_map
operator []	waveFormMap.h	/^		const T& operator[](int i) const { return storage[i]; }$/;"	f	class:wave_form_map
port	PROTOHI.h	/^    int port;$/;"	m	class:PROTOHI
print_buf	UDPLIB.cpp	/^int print_buf(uint8_t* buf, int buf_size)$/;"	f
rd_ADC	PROTOMED.h	/^    int rd_ADC(unsigned int start_page, unsigned int end_page, int* arr, int* size){ $/;"	f	class:PROTOMED
rd_reg	PROTOMED.h	/^    int rd_reg(unsigned int regn, unsigned int *param) {$/;"	f	class:PROTOMED
read_reg	TUDPLIB.h	/^int TUDPLIB<DEV>::read_reg(unsigned int regn, unsigned int *param)$/;"	f	class:TUDPLIB
ready_udp	UDPLIB.cpp	/^int UDPLIB::ready_udp(int timeout_ms)$/;"	f	class:UDPLIB
recv	UDPLIB.cpp	/^int UDPLIB::recv(void *buf, int buf_size)$/;"	f	class:UDPLIB
recv_to	UDPLIB.cpp	/^int UDPLIB::recv_to(void *_buf, int _size, int _to_ms, const int unet_flag)$/;"	f	class:UDPLIB
reset_measurement_cnt	PROTOMED.h	/^  int reset_measurement_cnt() {$/;"	f
resize	waveFormMap.h	/^		size_t resize (int _ne) {$/;"	f	class:wave_form_map
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 6) \/ 12)$/;"	v
s:l	Session.vim	/^let s:l = 112 - ((0 * winheight(0) + 6) \/ 12)$/;"	v
s:l	Session.vim	/^let s:l = 3 - ((2 * winheight(0) + 6) \/ 12)$/;"	v
s:l	Session.vim	/^let s:l = 4 - ((0 * winheight(0) + 6) \/ 12)$/;"	v
s:l	Session.vim	/^let s:l = 7 - ((6 * winheight(0) + 6) \/ 12)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
send	UDPLIB.cpp	/^int UDPLIB::send(void *buf, int buf_size)$/;"	f	class:UDPLIB
send_com	UDPLIB.cpp	/^int UDPLIB::send_com(int instr, int nreg, int param1, int param2)$/;"	f	class:UDPLIB
serv_addr	UDPLIB.h	/^    struct sockaddr_in serv_addr;$/;"	m	class:UDPLIB	typeref:struct:UDPLIB::sockaddr_in
set_start_mode	PROTOHI.h	/^int PROTOHI<DEV, PROTOLOW>::set_start_mode(bool mode){$/;"	f	class:PROTOHI
size	waveFormMap.h	/^		size_t size() { return *ne; }$/;"	f	class:wave_form_map
size	waveFormMap.h	/^template<class T, std::size_t N> struct wfm_remove_extent<T[N]> { using type = T; enum{ size = N}; };$/;"	e	enum:wfm_remove_extent::__anon1
sock	UDPLIB.h	/^    int sock;$/;"	m	class:UDPLIB
socket	UDPLIB.cpp	/^int UDPLIB::socket()$/;"	f	class:UDPLIB
start	PROTOMED.h	/^    int start() {$/;"	f	class:PROTOMED
start	TUDPLIB.h	/^int TUDPLIB<DEV>::start()$/;"	f	class:TUDPLIB
stop	PROTOMED.h	/^    int stop() {$/;"	f	class:PROTOMED
stop	TUDPLIB.h	/^int TUDPLIB<DEV>::stop()$/;"	f	class:TUDPLIB
storage	waveFormMap.h	/^		T* storage;$/;"	m	class:wave_form_map
wave_form_map	waveFormMap.h	/^		wave_form_map(T* _storage, int* _ne): storage(_storage), ne(_ne) {}$/;"	f	class:wave_form_map
wave_form_map	waveFormMap.h	/^		wave_form_map(const wave_form_map& src):storage(src.storage), ne(src.ne) {}$/;"	f	class:wave_form_map
wave_form_map	waveFormMap.h	/^class wave_form_map {$/;"	c
wfm_remove_extent	waveFormMap.h	/^template<class T, std::size_t N> struct wfm_remove_extent<T[N]> { using type = T; enum{ size = N}; };$/;"	s
wfm_remove_extent	waveFormMap.h	/^template<class T> struct wfm_remove_extent { using type = T;\/* enum{ size = 0}; *\/ };$/;"	s
wr_reg	PROTOMED.h	/^    int wr_reg(unsigned int regn, unsigned int param) {$/;"	f	class:PROTOMED
write_reg	TUDPLIB.h	/^int TUDPLIB<DEV>::write_reg(unsigned int regn, unsigned int param)$/;"	f	class:TUDPLIB
zt	Session.vim	/^normal! zt$/;"	m
~PROTOHI	PROTOHI.h	/^PROTOHI<DEV, PROTOLOW>::~PROTOHI() { }$/;"	f	class:PROTOHI
~PROTOMED	PROTOMED.h	/^    ~PROTOMED(){ };$/;"	f	class:PROTOMED
~TUDPLIB	TUDPLIB.h	/^	~TUDPLIB() {}$/;"	f	class:TUDPLIB
~UDPLIB	UDPLIB.cpp	/^UDPLIB::~UDPLIB()$/;"	f	class:UDPLIB
